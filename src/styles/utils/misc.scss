@use "@/styles/base/variables" as vars;
@use "@/styles/base/mixins" as mixins;


.flexCards {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  flex-flow: row wrap;
  margin: calc(-1 * vars.$cardSpace / 2);
  flex-direction: column;
  .flexItem {
    flex: 1;
    margin: calc(vars.$cardSpace / 2);
  }
  &.noShrink {
    .flexItem {
      flex: 0 0 auto;
    }
  }
  &.column2 {
    .flexItem {
      flex-basis: 100%;
      @include mixins.breakpoint(md) {
        flex-basis: calc((100% / 2) - vars.$cardSpace);
      }
    }
  }
  &.column3 {
    .flexItem {
      flex-basis: 100%;
      @include mixins.breakpoint(md) {
        flex-basis: calc((100% / 2) - vars.$cardSpace);
      }
      @include mixins.breakpoint(lg) {
        flex-basis: calc((100% / 3) - vars.$cardSpace);
      }
    }
  }
  &.column4 {
    .flexItem {
      flex-basis: 100%;
      @include mixins.breakpoint(md) {
        flex-basis: calc((100% / 2) - vars.$cardSpace);
      }
      @include mixins.breakpoint(lg) {
        flex-basis: calc((100% / 3) - vars.$cardSpace);
      }
      @include mixins.breakpoint(xl) {
        flex-basis: calc((100% / 4) - vars.$cardSpace);
      }
    }
  }
  @include mixins.breakpoint(md) {
    flex-direction: row;
  }
}

// Responsive 4-column layout utility
/* Grid container */
.grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
}

/* Column span classes */
.col1 {
  grid-column: span 1;
}
.col2 {
  grid-column: span 2;
}
.col3 {
  grid-column: span 3;
}
.col4 {
  grid-column: span 4;
}


/* Large devices (≤1200px) */
@media (max-width: vars.$breakpoint-xl) {
  .grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Medium devices (≤576px) */
@media (max-width: vars.$breakpoint-sm) {
  .grid {
    grid-template-columns: 1fr;
  }

  /* Force all items to span 1 column */
  .col1,
  .col2,
  .col3,
  .col4 {
    grid-column: span 1;
  }
}